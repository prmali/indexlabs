{"version":3,"sources":["assets/composite.png","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Heading","styled","h1","Container","div","AnchorWrapper","a","ImageContainer","Image","composite","ProjectLabel","p","Home","href","icon","faExternalLinkAlt","style","fontSize","margin","color","textAlign","paddingRight","library","add","fab","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,uC,2OCOrCC,EAAUC,IAAOC,GAAV,mDAIPC,EAAYF,IAAOG,IAAV,kIAQTC,EAAgBJ,IAAOK,EAAV,uJAWbC,EAAiBN,IAAOG,IAAV,iDAIdI,EAAQP,IAAOG,IAAV,yLACcK,KAWnBC,EAAeT,IAAOU,EAAV,wHAmDHC,EA5CF,WACZ,OACC,iCACC,kBAACZ,EAAD,iBACA,kBAACG,EAAD,KACC,kBAACE,EAAD,CAAeQ,KAAK,4BACnB,kBAACN,EAAD,KACC,kBAACC,EAAD,OAED,kBAACE,EAAD,oBACc,IACb,kBAAC,IAAD,CAAiBI,KAAMC,SAI1B,kBAACZ,EAAD,KACC,uBAAGU,KAAK,iCACP,kBAAC,IAAD,CACCC,KAAM,CAAC,MAAO,WACdE,MAAO,CACNC,SAAU,OACVC,OAAQ,QACRC,MAAO,yBAIV,uBAAGN,KAAK,mCACP,kBAAC,IAAD,CACCC,KAAM,CAAC,MAAO,kBACdE,MAAO,CACNC,SAAU,OACVC,OAAQ,QACRC,MAAO,yBAKX,uBAAGH,MAAO,CAAEI,UAAW,QAASC,aAAc,SAA9C,6BClFHC,IAAQC,IAAIC,KAKGC,MAJf,WACC,OAAO,kBAAC,EAAD,O,MCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e83511f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/composite.81893393.png\";","import React from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport composite from \"../assets/composite.png\";\n\nconst Heading = styled.h1`\n\ttext-align: center;\n`;\n\nconst Container = styled.div`\n\twidth: 85%;\n\tmargin: auto;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nconst AnchorWrapper = styled.a`\n\t:link {\n\t\ttext-decoration: none;\n\t}\n\n\t:visited {\n\t\tcolor: rgb(107, 3, 252);\n\t\ttext-decoration: none;\n\t}\n`;\n\nconst ImageContainer = styled.div`\n\toverflow: hidden;\n`;\n\nconst Image = styled.div`\n\tbackground-image: url(${composite});\n\theight: 400px;\n\twidth: 400px;\n\ttransition: 0.2s;\n\n\t:hover {\n\t\ttransform: scale(1.5);\n\t\tfilter: blur(2px);\n\t}\n`;\n\nconst ProjectLabel = styled.p`\n\tfont-weight: 600;\n\tfont-size: 20px;\n\tcolor: rgb(107, 3, 252);\n\ttext-align: center;\n`;\n\nconst Home = () => {\n\treturn (\n\t\t<section>\n\t\t\t<Heading>Projects</Heading>\n\t\t\t<Container>\n\t\t\t\t<AnchorWrapper href=\"https://www.gweiface.com\">\n\t\t\t\t\t<ImageContainer>\n\t\t\t\t\t\t<Image></Image>\n\t\t\t\t\t</ImageContainer>\n\t\t\t\t\t<ProjectLabel>\n\t\t\t\t\t\tgweiFace NFT{\" \"}\n\t\t\t\t\t\t<FontAwesomeIcon icon={faExternalLinkAlt} />\n\t\t\t\t\t</ProjectLabel>\n\t\t\t\t</AnchorWrapper>\n\t\t\t</Container>\n\t\t\t<Container>\n\t\t\t\t<a href=\"https://discord.gg/T5yTHunCfW\">\n\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\ticon={[\"fab\", \"discord\"]}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tfontSize: \"35px\",\n\t\t\t\t\t\t\tmargin: \"0 5px\",\n\t\t\t\t\t\t\tcolor: \"rgb(114, 137, 217)\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</a>\n\t\t\t\t<a href=\"https://twitter.com/gweiFaceNFT\">\n\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\ticon={[\"fab\", \"twitter-square\"]}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tfontSize: \"35px\",\n\t\t\t\t\t\t\tmargin: \"0 5px\",\n\t\t\t\t\t\t\tcolor: \"rgb(29, 161, 242)\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</a>\n\t\t\t</Container>\n\t\t\t<p style={{ textAlign: \"right\", paddingRight: \"30px\" }}>\n\t\t\t\tÂ© 2021 IndexLabs LLC\n\t\t\t</p>\n\t\t</section>\n\t);\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\n\nimport Home from \"./screens/Home\";\n\nlibrary.add(fab);\nfunction App() {\n\treturn <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}